@using ReserveBlockExplorer.Data
@using ReserveBlockExplorer.Models

@inherits OwningComponentBase<BlockchainService>

<div class="card">
    <div class="card-header">
        <div class="d-flex align-items-center">
            <h5>Transactions</h5>
            @if (transactions == null)
            {
                <div class="spinner-grow spinner-grow-sm ml-auto" role="status" aria-hidden="true"></div>
            }

        </div>
    </div>
        <div class="card-body">
            @if(transactions != null)
            {
                @foreach (var transaction in transactions.OrderByDescending(x => x.Height))
            {
                <div class="latest-block">
                    <div class="latest-block-highlight">
                        <span class="badge badge-dark">Block @transaction.Height</span>
                        <small>
                            <div>Timestamp: @transaction.Timestamp</div>
                        </small>
                        <small>
                            <div>Fee: @transaction.Fee</div>
                        </small>
                    </div>
                    <div>
                        Hash: @transaction.Hash.Substring(0,10)
                        <small>
                            <div>From: @transaction.FromAddress</div>
                        </small>
                        <small>
                            <div>To: @transaction.ToAddress</div>
                        </small>
                        <smal>RBX: @transaction.Amount</smal>
                    </div>
                </div>
            }
            }
            
    </div>
</div>
@code {
    List<Transaction>? transactions;

    protected async override Task OnInitializedAsync()
    {
        // load the list
        transactions = await Service.GetRecentTransactions();
        //StateHasChanged();
    }

    protected override async void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
                var timer = new System.Threading.Timer((_) =>
                {
                    InvokeAsync( async ()  =>
               {
               // Add your update logic here
               await UpdateTransactions();
               // Update the UI
               //StateHasChanged();
                    });
                }, null, 20000, 12000);
        }
        base.OnInitialized();
    }

    private async Task UpdateTransactions()
    {
        transactions = await Service.GetRecentTransactions();
        this.StateHasChanged();
    }

    public static DateTime UnixTimeStampToDateTime( double unixTimeStamp )
    {
        // Unix timestamp is seconds past epoch
        DateTime dateTime = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc);
        dateTime = dateTime.AddSeconds( unixTimeStamp ).ToLocalTime();
        return dateTime;
    }


}
