@using ReserveBlockExplorer.Data
@using ReserveBlockExplorer.Models

@inherits OwningComponentBase<BlockchainService>
@inject NavigationManager NavManager

<div class="card">
    <div class="card-header">
        <div class="d-flex align-items-center">
            <h5>Blocks</h5>
                @if (blocks == null)
                {
                    <div class="spinner-grow spinner-grow-sm ml-auto" role="status" aria-hidden="true"></div>
                }
        </div>
    </div>
    <div class="card-body">
        @if(blocks != null)
        {
            @foreach (var block in blocks.OrderByDescending(x => x.Height))
            {
                <div class="latest-block">
                    <div class="latest-block-highlight">
                        <span><a class="badge badge-dark" href="block/@block.Height">Block @block.Height</a></span>
                        <small>
                            <div>@string.Format(@"> {0:mm} mins {0:ss} secs ago", (DateTime.UtcNow - UnixTimeStampToDateTime(block.Timestamp)))</div>
                        </small>
                        <small>
                            <div>@UnixTimeStampToDateTime(block.Timestamp).ToLocalTime()</div>
                        </small>
                    </div>
                    <div>
                        Validated By: @block.Validator
                        <p></p>
                        <p><b><a href="block/@block.Height">@block.NumOfTx Transactions</a></b></p>
                    </div>
                </div>
            }
        }
            
    </div>
</div>

@code {
    List<Block>? blocks;

    protected async override Task OnInitializedAsync()
    {
        // load the list
        blocks = await Service.GetRecentBlocks();
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        
            var timer = new System.Threading.Timer((_) =>
            {
                InvokeAsync( async ()  =>
                {
                   // Add your update logic here
                   await UpdateBlock();
                   // Update the UI
                });
            }, null, 5000, 12000);

        
       // base.OnInitialized();
    }


    private async Task UpdateBlock()
    {
        blocks = await Service.GetRecentBlocks();
        await InvokeAsync(StateHasChanged);
        //NavManager.NavigateTo("/", true);
    }

    public static DateTime UnixTimeStampToDateTime( double unixTimeStamp )
    {
        // Unix timestamp is seconds past epoch
        DateTime dateTime = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc);
        dateTime = dateTime.AddSeconds( unixTimeStamp ).ToLocalTime();
        return dateTime;
    }

}
